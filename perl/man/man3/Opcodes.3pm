.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Opcodes 3pm"
.TH Opcodes 3pm "2014-07-16" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Opcodes \- More Opcodes information from opnames.h and opcode.h
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Opcodes;
\&  print "Empty opcodes are null and ",
\&    join ",", map {opname $_}, opaliases(opname2code(\*(Aqnull\*(Aq));
\&
\&  # All LOGOPs
\&  perl \-MOpcodes \-e\*(Aq$,=q( );print map {opname $_} grep {opclass($_) == 2} 1..opcodes\*(Aq
\&
\&  # Ops which can return other than op\->next
\&  perl \-MOpcodes \-e\*(Aq$,=q( );print map {opname $_} grep {Opcodes::maybranch $_} 1..opcodes\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "Operator Names and Operator Lists"
.IX Header "Operator Names and Operator Lists"
The canonical list of operator names is the contents of the array
PL_op_name, defined and initialised in file \fIopcode.h\fR of the Perl
source distribution (and installed into the perl library).
.PP
Each operator has both a terse name (its opname) and a more verbose or
recognisable descriptive name. The opdesc function can be used to
return a the description for an \s-1OP.\s0
.IP "an operator name (opname)" 8
.IX Item "an operator name (opname)"
Operator names are typically small lowercase words like enterloop,
leaveloop, last, next, redo etc. Sometimes they are rather cryptic
like gv2cv, i_ncmp and ftsvtx.
.IP "an \s-1OP\s0 opcode" 8
.IX Item "an OP opcode"
The opcode information functions all take the integer code, 0..MAX0,
\&\s-1MAXO\s0 being accessed by scalar \f(CW@opcodes\fR, the length of
the opcodes array.
.SH "Opcode Information"
.IX Header "Opcode Information"
Retrieve information of the Opcodes. All are available for export by the package.
Functions names starting with \*(L"op\*(R" are automatically exported.
.IP "opcodes" 8
.IX Item "opcodes"
In a scalar context opcodes returns the number of opcodes in this
version of perl (361 with perl\-5.10).
.Sp
In a list context it returns a list of all the operators with
its properties, a list of [ opcode opname ppaddr check opargs ].
.IP "opname (\s-1OP\s0)" 8
.IX Item "opname (OP)"
Returns the lowercase name without pp_ for the \s-1OP,\s0
an integer between 0 and \s-1MAXO.\s0
.IP "ppaddr (\s-1OP\s0)" 8
.IX Item "ppaddr (OP)"
Returns the address of the ppaddr, which can be used to
get the aliases for each opcode.
.IP "check (\s-1OP\s0)" 8
.IX Item "check (OP)"
Returns the address of the check function.
.IP "opdesc (\s-1OP\s0)" 8
.IX Item "opdesc (OP)"
Returns the string description of the \s-1OP.\s0
.IP "opargs (\s-1OP\s0)" 8
.IX Item "opargs (OP)"
Returns the opcode args encoded as integer of the opcode.
See below or \fIopcode.pl\fR for the encoding details.
.Sp
.Vb 1
\&  opflags 1\-128 + opclass 1\-13 << 9 + argnum 1\-15.. << 13
.Ve
.IP "argnum (\s-1OP\s0)" 8
.IX Item "argnum (OP)"
Returns the arguments and types encoded as number acccording
to the following table, 4 bit for each argument.
.Sp
.Vb 7
\&    \*(AqS\*(Aq,  1,            # scalar
\&    \*(AqL\*(Aq,  2,            # list
\&    \*(AqA\*(Aq,  3,            # array value
\&    \*(AqH\*(Aq,  4,            # hash value
\&    \*(AqC\*(Aq,  5,            # code value
\&    \*(AqF\*(Aq,  6,            # file value
\&    \*(AqR\*(Aq,  7,            # scalar reference
\&
\&  + \*(Aq?\*(Aq,  8,            # optional
.Ve
.Sp
Example:
.Sp
.Vb 2
\&  argnum(opname2code(\*(Aqbless\*(Aq)) => 145
\&  145 = 0b10010001 => S S?
\&
\&  first 4 bits 0001 => 1st arg is a Scalar,
\&  next 4 bits  1001 => (bit 8+1) 2nd arg is an optional Scalar
.Ve
.IP "opclass (\s-1OP\s0)" 8
.IX Item "opclass (OP)"
Returns the op class as number according to the following table
from \fIopcode.pl\fR:
.Sp
.Vb 10
\&    \*(Aq0\*(Aq,  0,            # baseop
\&    \*(Aq1\*(Aq,  1,            # unop
\&    \*(Aq2\*(Aq,  2,            # binop
\&    \*(Aq|\*(Aq,  3,            # logop
\&    \*(Aq@\*(Aq,  4,            # listop
\&    \*(Aq/\*(Aq,  5,            # pmop
\&    \*(Aq$\*(Aq,  6,            # svop_or_padop
\&    \*(Aq#\*(Aq,  7,            # padop
\&    \*(Aq"\*(Aq,  8,            # pvop_or_svop
\&    \*(Aq{\*(Aq,  9,            # loop
\&    \*(Aq;\*(Aq,  10,           # cop
\&    \*(Aq%\*(Aq,  11,           # baseop_or_unop
\&    \*(Aq\-\*(Aq,  12,           # filestatop
\&    \*(Aq}\*(Aq,  13,           # loopexop
.Ve
.IP "opflags (\s-1OP\s0)" 8
.IX Item "opflags (OP)"
Returns op flags as number according to the following table
from \fIopcode.pl\fR. In doubt see your perl source.
\&\fIWarning: There is currently an attempt to change that, but I posted a fix\fR
.Sp
.Vb 9
\&    \*(Aqm\*(Aq =>  OA_MARK,            # needs stack mark
\&    \*(Aqf\*(Aq =>  OA_FOLDCONST,       # fold constants
\&    \*(Aqs\*(Aq =>  OA_RETSCALAR,       # always produces scalar
\&    \*(Aqt\*(Aq =>  OA_TARGET,          # needs target scalar
\&    \*(AqT\*(Aq =>  OA_TARGET | OA_TARGLEX,     # ... which may be lexical
\&    \*(Aqi\*(Aq =>  OA_RETINTEGER,      # always produces integer (this bit is in question)
\&    \*(AqI\*(Aq =>  OA_OTHERINT,        # has corresponding int op
\&    \*(Aqd\*(Aq =>  OA_DANGEROUS,       # danger, unknown side effects
\&    \*(Aqu\*(Aq =>  OA_DEFGV,           # defaults to $_
.Ve
.Sp
plus not from \fIopcode.pl\fR:
.Sp
.Vb 2
\&    \*(Aqn\*(Aq => OA_NOSTACK,          # nothing on the stack, no args and return
\&    \*(AqN\*(Aq => OA_MAYBRANCH         # No next. may return other than PL_op\->op_next, maybranch
.Ve
.Sp
These not yet:
.Sp
.Vb 4
\&    \*(AqS\*(Aq =>  OA_MAYSCALAR        # retval may be scalar
\&    \*(AqA\*(Aq =>  OA_MAYARRAY         # retval may be array
\&    \*(AqV\*(Aq =>  OA_MAYVOID          # retval may be void
\&    \*(AqF\*(Aq =>  OA_RETFIXED         # fixed retval type, either S or A or V
.Ve
.IP "OA_* constants" 8
.IX Item "OA_* constants"
All \s-1OA_\s0 flag, class and argnum constants from \fIop.h\fR are exported.
Addionally new \s-1OA_\s0 flags have been created which are needed for B::CC.
.IP "opaliases (\s-1OP\s0)" 8
.IX Item "opaliases (OP)"
Returns the opcodes for the aliased opcode functions for the given \s-1OP,\s0 the ops
with the same ppaddr.
.IP "opname2code (\s-1OPNAME\s0)" 8
.IX Item "opname2code (OPNAME)"
Does a reverse lookup in the opcodes list to get the opcode for the given
name.
.IP "maybranch (\s-1OP\s0)" 8
.IX Item "maybranch (OP)"
Returns if the \s-1OP\s0 function may return not op\->op_next.
.Sp
Note that not all \s-1OP\s0 classes which have op\->op_other, op\->op_first or op\->op_last
(higher then \s-1UNOP\s0) are actually returning an other next op than op\->op_next.
.Sp
.Vb 1
\&  opflags(OP) & 16384
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Opcode \*(-- The Perl \s-1CORE\s0 Opcode module for handling sets of Opcodes used by Safe.
.PP
Safe \*(-- Opcode and namespace limited execution compartments
.PP
B::CC \*(-- The optimizing perl compiler uses this module. Jit also,
            but only the static information
.SH "TEST REPORTS"
.IX Header "TEST REPORTS"
\&\s-1CPAN\s0 Testers: <http://cpantesters.org/distro/O/Opcodes>
.PP
Travis: https://travis\-ci.org/rurban/Opcodes.png <https://travis-ci.org/rurban/Opcodes/>
.PP
Coveralls: https://coveralls.io/repos/rurban/Opcodes/badge.png <https://coveralls.io/r/rurban/Opcodes?branch=master>
.SH "AUTHOR"
.IX Header "AUTHOR"
Reini Urban \f(CW\*(C`rurban@cpan.org\*(C'\fR 2010, 2014
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 1995, Malcom Beattie.
Copyright 1996, Tim Bunce.
Copyright 2010, 2014 Reini Urban.
All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
