.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGI::Lite 3pm"
.TH CGI::Lite 3pm "2015-12-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CGI::Lite \- Process and decode WWW forms and cookies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use CGI::Lite ();
\&
\&    my $cgi = CGI::Lite\->new ();
\&
\&    $cgi\->set_directory (\*(Aq/some/dir\*(Aq) or die "Directory cannot be set.\en";
\&    $cgi\->add_mime_type (\*(Aqtext/csv\*(Aq);
\&
\&    my $cookies = $cgi\->parse_cookies;
\&    my $form    = $cgi\->parse_new_form_data;
\&
\&    my $status  = $cgi\->is_error;
\&    if ($status) {
\&        my $message = $cgi\->get_error_message;
\&        die $message;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can be used to decode form data, query strings, file uploads
and cookies in a very simple manner.
.PP
It has only one dependency and is therefore relatively fast to
instantiate. This makes it well suited to a non-persistent \s-1CGI\s0 scenario.
.SH "METHODS"
.IX Header "METHODS"
Here are the methods used to process the forms and cookies:
.SS "new"
.IX Subsection "new"
The constructor takes no arguments and returns a new CGI::Lite object.
.SS "parse_form_data"
.IX Subsection "parse_form_data"
This handles the following types of requests: \s-1GET, HEAD\s0 and \s-1POST.\s0
By default, CGI::Lite uses the environment variable \s-1REQUEST_METHOD\s0 to 
determine the manner in which the query/form information should be 
decoded. However, it may also be passed a valid request 
method as a scalar string to force CGI::Lite to decode the information in 
a specific manner.
.PP
.Vb 1
\&        my $params = $cgi\->parse_form_data (\*(AqGET\*(Aq);
.Ve
.PP
For multipart/form\-data, uploaded files are stored in the user selected 
directory (see set_directory). If timestamp mode is on (see 
add_timestamp), the files are named in the following format:
.PP
.Vb 1
\&    timestamp_\|_filename
.Ve
.PP
where the filename is specified in the \*(L"Content-disposition\*(R" header.
\&\fI\s-1NOTE:\s0\fR, the browser \s-1URL\s0 encodes the name of the file. This module
makes \fIno\fR effort to decode the information for security reasons.
However, this can be achieved by creating a subroutine and then using
the filter_filename method.
.PP
Returns either a hash or a reference to the hash, which contains
all of the key/value pairs. For fields that contain file information,
the value contains either the path to the file, or the filehandle 
(see the set_file_type method).
.SS "parse_new_form_data"
.IX Subsection "parse_new_form_data"
As for parse_form_data, but clears the \s-1CGI\s0 object state before processing 
the request. This is useful in persistent applications (e.g. \s-1FCGI\s0), where
the \s-1CGI\s0 object is reused for multiple requests. e.g.
.PP
.Vb 6
\&    my $CGI = CGI::Lite\->new ();
\&    while (FCGI::accept > 0)
\&    {
\&        my $query = $CGI\->parse_new_form_data ();
\&        # process query
\&    }
.Ve
.SS "parse_cookies"
.IX Subsection "parse_cookies"
Decodes and parses cookies passed by the browser. This method works in 
much the same manner as parse_form_data. As these two data sources
are treated the same internally, users who wish to extract form and
cookie data separately might find it easiest to call
parse_cookies first and then parse_new_form_data in order to retrieve
two distinct hashes (or hashrefs).
.SS "is_error"
.IX Subsection "is_error"
This method is used to check for any potential errors after calling
either parse_form_data or parse_cookies.
.PP
.Vb 2
\&    my $form = $cgi\->parse_form_data ();
\&    my $went_wrong = $cgi\->is_error ();
.Ve
.PP
Returns 0 if there is no error, 1 otherwise.
.SS "get_error_message"
.IX Subsection "get_error_message"
If an error occurs when parsing form/query information or cookies, this
method may be used to retrieve the error message. Remember, the presence
of any errors can be checked by calling the is_error method.
.PP
.Vb 1
\&    my $msg = $cgi\->get_error_message ();
.Ve
.PP
Returns the error message as a plain text string.
.SS "set_platform"
.IX Subsection "set_platform"
This method is used to set the platform on which the web server is
running. CGI::Lite uses this information to translate end-of-line
(\s-1EOL\s0) characters for uploaded files (see the add_mime_type and
remove_mime_type methods) so that they are accounted for properly on
that platform.
.PP
.Vb 1
\&    $cgi\->set_platform ($platform);
.Ve
.PP
\&\f(CW$platform\fR can be any of (case insensitive):
.PP
.Vb 3
\&    Unix                                  EOL: \e012      = \en
\&    Windows, Windows95, DOS, NT, PC       EOL: \e015\e012  = \er\en
\&    Mac or Macintosh                      EOL: \e015      = \er
.Ve
.PP
\&\*(L"Unix\*(R" is the default.
.PP
Returns undef.
.SS "set_size_limit"
.IX Subsection "set_size_limit"
To set a specific limit on the total size of the request (in bytes) call
this method with that size as the sole argument. A size of zero
effectively disables \s-1POST\s0 requests. To specify an unlimited size (the
default) use an argument of \-1.
.PP
.Vb 1
\&    my $size_limit = $cgi\->set_size_limit (10_000_000);
.Ve
.PP
Returns the new value if provided, otherwise the existing value.
.SS "deny_uploads"
.IX Subsection "deny_uploads"
To prevent any file uploads simply call this method with an argument of
1. To enable them again, use an argument of zero.
.PP
.Vb 1
\&    my $deny_uploads = $cgi\->deny_uploads (1);
.Ve
.PP
Returns the new value if provided, otherwise the existing value.
.SS "force_unique_cookies"
.IX Subsection "force_unique_cookies"
It is generally considered a mistake to send an \s-1HTTP\s0 request with
multiple cookies of the same name. However, the \s-1RFC\s0 is somewhat vague
regarding how servers are expected to handle such an eventuality.
CGI::Lite has always allowed such multiple values and returned them as
an arrayref to be entirely consistent with the same treatment of
form/query data.
.PP
To override the default behaviour this method may be called with a
single integer argument before the call to parse_cookies. An argument
of 1 means that the first cookie value will be used and the others
discarded. An argument of 2 means that the last cookie value will be
used and the others discarded. An argument of 3 means that an arrayref
will be returned as usual but an error raised to indicate the situation.
An argument of 0 (or any other value) sets it back to the default.
.PP
.Vb 2
\&    $cgi\->force_unique_cookies (1);
\&    $cgi\->parse_cookies;
.Ve
.PP
Note that if there is already an item of data in the CGI::Lite object
which matches the name of a cookie then the subsequent parse_cookies
call will treat the new cookie value as another data item and the resulting
behaviour will be affected by this method. This is another reason to
call parse_cookies before parse_form_data.
.PP
Returns the new value if provided, otherwise the existing value.
.SS "set_directory"
.IX Subsection "set_directory"
Used to set the directory where the uploaded files will be stored 
(only applies to the \fImultipart/form\-data\fR encoding scheme).
.PP
.Vb 3
\&    my $tmpdir = \*(Aq/some/dir\*(Aq;
\&    $cgi\->set_directory ($tmpdir) or
\&        die "Directory $tmpdir cannot be used.\en";
.Ve
.PP
This function should be called \fIbefore\fR parse_form_data, 
or else the directory defaults to \*(L"/tmp\*(R". If the application cannot 
write to the directory for whatever reason, an error status is returned.
.PP
Returns 0 on error, 1 otherwise.
.SS "close_all_files"
.IX Subsection "close_all_files"
.Vb 1
\&    $cgi\->close_all_files;
.Ve
.PP
All uploaded files that are opened as a result of calling set_file_type
with the \*(L"handle\*(R" argument can be closed in one shot by calling this
method which takes no arguments and returns undef.
.SS "add_mime_type"
.IX Subsection "add_mime_type"
By default, \s-1EOL\s0 characters are translated for all uploaded files
with specific \s-1MIME\s0 types (i.e. text/plain, text/html, etc.).
This method can be used to add to the list of \s-1MIME\s0 types. For example,
if you want CGI::Lite to translate \s-1EOL\s0 characters for uploaded
files of \fIapplication/mac\-binhex40\fR, then you would do this:
.PP
.Vb 1
\&    $cgi\->add_mime_type (\*(Aqapplication/mac\-binhex40\*(Aq);
.Ve
.PP
Returns 1 if this \s-1MIME\s0 type is newly added, 0 otherwise.
.SS "remove_mime_type"
.IX Subsection "remove_mime_type"
This method is the converse of add_mime_type. It allows for the
removal of a particular \s-1MIME\s0 type. For example, if you do not want 
CGI::Lite to translate \s-1EOL\s0 characters for uploaded files of type \fItext/html\fR, 
then you would do this:
.PP
.Vb 1
\&    $cgi\->remove_mime_type (\*(Aqtext/html\*(Aq);
.Ve
.PP
Returns 1 if this \s-1MIME\s0 type is newly deleted, 0 otherwise.
.SS "get_mime_types"
.IX Subsection "get_mime_types"
Returns the list of the 
\&\s-1MIME\s0 types for which \s-1EOL\s0 translation is performed.
.PP
.Vb 1
\&    my @mimelist = $cgi\->get_mime_types ();
.Ve
.SS "get_upload_type"
.IX Subsection "get_upload_type"
Returns the \s-1MIME\s0 type of uploaded data. Takes the field name as a scalar
argument. This previously undocumented function was named print_mime_type
prior to version 3.0.
.PP
.Vb 1
\&    my $this_type = $cgi\->get_upload_type ($field);
.Ve
.PP
Returns the \s-1MIME\s0 type as a scalar string if single valued, an arrayref
if multi-valued or undef if the argument does not exist or has no type.
.SS "set_file_type"
.IX Subsection "set_file_type"
The \fInames\fR of uploaded files are returned by default when
the parse_form_data method is called . But if this method is passed the string \*(L"handle\*(R" as its argument beforehand then
the \fIhandles\fR to the files are returned instead. However, the name
of each handle still corresponds to the filename.
.PP
.Vb 2
\&    # $fh has been set to one of \*(Aqhandle\*(Aq or \*(Aqfile\*(Aq
\&    $cgi\->set_file_type ($fh);
.Ve
.PP
This function should be called \fIbefore\fR any call to parse_form_data, or 
else it will have no effect.
.SS "add_timestamp"
.IX Subsection "add_timestamp"
By default, a timestamp is added to the front of uploaded files. 
However, there is the option of completely turning off timestamp mode
(value 0), or adding a timestamp only for existing files (value 2).
.PP
.Vb 5
\&    $cgi\->add_timestamp ($tsflag);      
\&    # where $tsflag takes one of these values
\&    #       0 = no timestamp
\&    #       1 = timestamp all files (default)
\&    #       2 = timestamp only if file exists
.Ve
.SS "filter_filename"
.IX Subsection "filter_filename"
This method is used to change the manner in which uploaded
files are named. For example, if you want uploaded filenames
to be all upper case, you can use the following code:
.PP
.Vb 2
\&    $cgi\->filter_filename (\e&make_uppercase);
\&    $cgi\->parse_form_data;
\&
\&    # ...
\&
\&    sub make_uppercase
\&    {
\&        my $file = shift;
\&
\&        $file =~ tr/a\-z/A\-Z/;
\&        return $file;
\&    }
.Ve
.PP
This method is perhaps best used to sanitise filenames for a specific
O/S or filesystem e.g. by removing spaces or leading hyphens, etc.
.SS "set_buffer_size"
.IX Subsection "set_buffer_size"
This method allows fine-grained control of the buffer size used internally
when dealing with multipart form data. However, the \fIactual\fR buffer
size that the algorithm uses \fIcan\fR be up to 3x the value specified
as the argument. This ensures that boundary strings are not \*(L"split\*(R"
between multiple reads. So, take this into consideration when setting
the buffer size.
.PP
.Vb 1
\&    my $size = $cgi\->set_buffer_size (4096);
.Ve
.PP
The buffer size may not be set below 256 bytes nor above the total amount 
of multipart form data. The default value is 1024 bytes.
.PP
Returns the buffer size.
.SS "get_ordered_keys"
.IX Subsection "get_ordered_keys"
Returns either a reference to an array or an array itself consisting
of the form fields/cookies in the order they were parsed.
.PP
.Vb 2
\&    my $keys = $cgi\->get_ordered_keys;
\&    my @keys = $cgi\->get_ordered_keys;
.Ve
.SS "print_data"
.IX Subsection "print_data"
Displays all the key/value pairs (either form data or cookie information)
in an ordered fashion to standard output. It is mainly useful for
debugging. There are no arguments and no return values.
.SS "wrap_textarea"
.IX Subsection "wrap_textarea"
This is a method to wrap a long string into one that is separated by \s-1EOL\s0
characters (see set_platform) at fixed lengths.  The two arguments
to be passed to this method are the string and the length at which the
line separator is to be added.
.PP
.Vb 1
\&    my $new_string = $cgi\->wrap_textarea ($string, $length);
.Ve
.PP
Returns the modified string.
.SS "get_multiple_values"
.IX Subsection "get_multiple_values"
The values returned by the parsing methods in this module for multiple
fields with the same name are given as array references. This utility
method exists to convert either a scalar value or an array reference
into a list thus removing the need for the user to determine whether the
returned value for any field is a reference or a scalar.
.PP
.Vb 1
\&    @all_values = $cgi\->get_multiple_values ($reference);
.Ve
.PP
It is only provided as a convenience to the user and is not used
internally by the module itself.
.PP
Returns a list consisting of the multiple values.
.SS "browser_escape"
.IX Subsection "browser_escape"
Certain characters have special significance within \s-1HTML.\s0 These
characters are: <, >, &, \*(L", # and %. To display these \*(R"special\*(L"
characters, they can be escaped using the following notation \*(R"&#NNN;"
where \s-1NNN\s0 is their \s-1ASCII\s0 code.  This utility method does just that.
.PP
.Vb 1
\&    $escaped_string = $cgi\->browser_escape ($string);
.Ve
.PP
Returns the escaped string.
.SS "url_encode"
.IX Subsection "url_encode"
This method will URL-encode a string passed as its argument. It may be
used to encode any data to be passed as a query string to a \s-1CGI\s0
application, for example.
.PP
.Vb 1
\&    $encoded_string = $cgi\->url_encode ($string);
.Ve
.PP
Returns the URL-encoded string.
.SS "url_decode"
.IX Subsection "url_decode"
This method is used to URL-decode a string.
.PP
.Vb 1
\&    $decoded_string = $cgi\->url_decode ($string);
.Ve
.PP
Returns the URL-decoded string.
.SS "is_dangerous"
.IX Subsection "is_dangerous"
This method checks for the existence of dangerous meta-characters.
.PP
.Vb 1
\&    $status = $cgi\->is_dangerous ($string);
.Ve
.PP
Returns 1 if such characters are found, 0 otherwise.
.SH "DEPRECATED METHODS"
.IX Header "DEPRECATED METHODS"
The following methods and subroutines are deprecated. Please do not use
them in new code and consider excising them from old code. They will be
removed in a future release.
.IP "\fBreturn_error\fR" 4
.IX Item "return_error"
.Vb 1
\&    $cgi\->return_error (\*(Aqerror 1\*(Aq, \*(Aqerror 2\*(Aq, \*(Aqerror 3\*(Aq);
.Ve
.Sp
You can use this method to print errors to standard output (ie. as part of
the \s-1HTTP\s0 response) and exit. \fBThis method is deprecated as of version 3.0.\fR
The same functionality can be achieved with:
.Sp
.Vb 2
\&    print (\*(Aqerror 1\*(Aq, \*(Aqerror 2\*(Aq, \*(Aqerror 3\*(Aq);
\&    exit 1;
.Ve
.IP "\fBcreate_variables\fR" 4
.IX Item "create_variables"
\&\fBThis method is deprecated as of version 3.0.\fR It runs contrary to the
principles of structured programming and has really nothing to do with
\&\s-1CGI\s0 form or cookie handling. It is retained here for backwards
compatibility but will be removed entirely in later versions.
.Sp
.Vb 3
\&    %form = (\*(Aqname\*(Aq   => \*(Aqalan wells\*(Aq,
\&             \*(Aqsport\*(Aq  => \*(Aqtrack and field\*(Aq,
\&             \*(Aqevents\*(Aq => \*(Aq100m\*(Aq);
\&
\&    $cgi\->create_variables (\e%hash);
.Ve
.Sp
This converts a hash ref into scalars named for its keys and this
example will create three scalar variables: \f(CW$name\fR, \f(CW$sport\fR and \f(CW$events\fR.
.SH "OBSOLETE METHODS/SUBROUTINES"
.IX Header "OBSOLETE METHODS/SUBROUTINES"
The following methods and subroutines were deprecated in the 2.x branch
and have now been removed entirely from the module.
.IP "\fBescape_dangerous_chars\fR" 4
.IX Item "escape_dangerous_chars"
The use of this subroutine had been strongly discouraged for more than a
decade (See
<https://web.archive.org/web/20100627014535/http://use.perl.org/~cbrooks/journal/10542>
and <http://www.securityfocus.com/archive/1/311414> for an
advisory by Ronald F. Guilmette.) It has been removed as of version 3.0.
.IP "\fBprint_form_data\fR" 4
.IX Item "print_form_data"
Use print_data instead.
.IP "\fBprint_cookie_data\fR" 4
.IX Item "print_cookie_data"
Use print_data instead.
.PP
Compatibility note: in 2.x and older versions the following were to be used as
subroutines rather than methods:
.IP "browser_escape" 4
.IX Item "browser_escape"
.PD 0
.IP "url_encode" 4
.IX Item "url_encode"
.IP "url_decode" 4
.IX Item "url_decode"
.IP "is_dangerous" 4
.IX Item "is_dangerous"
.PD
.PP
They will still work as such and are still exported
by default. Users are encouraged to migrate to the new method calls
instead as both the export and subroutine interface will be retired in
future. Non-method use currently triggers a warning.
.SH "VERSIONS"
.IX Header "VERSIONS"
This module maintained backwards compatibility with versions of
Perl back to 5.002 for a very long time. Such stability is a welcome
attribute but it restricts the code by disallowing access to features
introduced into the language since 1996.
.PP
With this in mind, there are two maintained branches of this module going
forwards. The 2.x branch will retain the backwards compatibility but
will not have any new features introduced. Changes to this legacy branch
will be bug fixes only. The new 3.x branch will be the main release and
will require a more modern perl (5.6.0 is now the bare minimum). The
3.x branch has new features and has removed some of the legacy code
including some methods which had been deprecated for more than a decade.
The attention of users wishing to upgrade from 2.x to 3.x is drawn to
the \*(L"\s-1DEPRECATED METHODS\*(R"\s0 and \*(L"\s-1OBSOLETE METHODS/SUBROUTINES\*(R"\s0 sections of this
document.
.PP
Requests for new features in the 3.x branch should be made via
the request tracker at <https://rt.cpan.org/Public/Dist/Display.html?Name=CGI\-Lite>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
If you're looking for more comprehensive \s-1CGI\s0 modules, you can either use
the CGI::* modules or \s-1CGI\s0.pm.
.PP
CGI::Lite::Request uses some similar method names to \s-1CGI\s0.pm thus allowing
easy transition between the two. It uses CGI::Lite as a dependency.
.PP
CGI::Simple, CGI::Minimal and CGI::Thin are alternative
lightweight \s-1CGI\s0 implementations.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/openstrike/perl\-CGI\-Lite>
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Maintenance of this module as of May 2014 has been taken over by Pete Houston
<cpan@openstrike.co.uk>.
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
The author (Shishir) thanks the following for finding bugs
and offering suggestions:
.IP "Eric D. Friedman (friedman@uci.edu)" 4
.IX Item "Eric D. Friedman (friedman@uci.edu)"
.PD 0
.IP "Thomas Winzig (tsw@pvo.com)" 4
.IX Item "Thomas Winzig (tsw@pvo.com)"
.IP "Len Charest (len@cogent.net)" 4
.IX Item "Len Charest (len@cogent.net)"
.IP "Achim Bohnet (ach@rosat.mpe\-garching.mpg.de)" 4
.IX Item "Achim Bohnet (ach@rosat.mpe-garching.mpg.de)"
.IP "John E. Townsend (John.E.Townsend@BST.BLS.com)" 4
.IX Item "John E. Townsend (John.E.Townsend@BST.BLS.com)"
.IP "Andrew McRae (mcrae@internet.com)" 4
.IX Item "Andrew McRae (mcrae@internet.com)"
.IP "Dennis Grant (dg50@chrysler.com)" 4
.IX Item "Dennis Grant (dg50@chrysler.com)"
.IP "Scott Neufeld (scott.neufeld@mis.ussurg.com)" 4
.IX Item "Scott Neufeld (scott.neufeld@mis.ussurg.com)"
.IP "Raul Almquist (imrs@ShadowMAC.org)" 4
.IX Item "Raul Almquist (imrs@ShadowMAC.org)"
.IP "and many others!" 4
.IX Item "and many others!"
.PD
.PP
The present maintainer wishes to thank the previous maintainers:
Smylers, Andreas, Ben and Shishir.
.SH "COPYRIGHT INFORMATION"
.IX Header "COPYRIGHT INFORMATION"
Copyright (c) 1995, 1996, 1997 by Shishir Gundavaram.
All Rights Reserved.
.PP
Changes in versions 2.03 onwards are copyright 2014, 2015 by Pete Houston.
.PP
Permission to use, copy, and  distribute  is  hereby granted,
providing that the above copyright notice and this permission
appear in all copies and in supporting documentation.
.SH "LICENCE"
.IX Header "LICENCE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
