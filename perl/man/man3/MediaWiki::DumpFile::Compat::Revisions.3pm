.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MediaWiki::DumpFile::Compat::Revisions 3pm"
.TH MediaWiki::DumpFile::Compat::Revisions 3pm "2011-03-25" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::MediaWikiDump::Revisions \- Object capable of processing dump files with multiple revisions per article
.SH "ABOUT"
.IX Header "ABOUT"
This object is used to access the metadata associated with a MediaWiki instance and provide an iterative interface
for extracting the individual article revisions out of the same. To guarantee that there is only a single
revision per article use the Parse::MediaWikiDump::Pages object.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use MediaWiki::DumpFile::Compat;
\&  
\&  $pmwd = Parse::MediaWikiDump\->new;
\&  $revisions = $pmwd\->revisions(\*(Aqpages\-articles.xml\*(Aq);
\&  $revisions = $pmwd\->revisions(\e*FILEHANDLE);
\&  
\&  #print the title and id of each article inside the dump file
\&  while(defined($page = $revisions\->next)) {
\&    print "title \*(Aq", $page\->title, "\*(Aq id ", $page\->id, "\en";
\&  }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$revisions\->new" 4
.el .IP "\f(CW$revisions\fR\->new" 4
.IX Item "$revisions->new"
Open the specified MediaWiki dump file. If the single argument to this method
is a string it will be used as the path to the file to open. If the argument
is a reference to a filehandle the contents will be read from the filehandle as
specified.
.ie n .IP "$revisions\->next" 4
.el .IP "\f(CW$revisions\fR\->next" 4
.IX Item "$revisions->next"
Returns an instance of the next available Parse::MediaWikiDump::page object or returns undef
if there are no more articles left.
.ie n .IP "$revisions\->version" 4
.el .IP "\f(CW$revisions\fR\->version" 4
.IX Item "$revisions->version"
Returns a plain text string of the dump file format revision number
.ie n .IP "$revisions\->sitename" 4
.el .IP "\f(CW$revisions\fR\->sitename" 4
.IX Item "$revisions->sitename"
Returns a plain text string that is the name of the MediaWiki instance.
.ie n .IP "$revisions\->base" 4
.el .IP "\f(CW$revisions\fR\->base" 4
.IX Item "$revisions->base"
Returns the \s-1URL\s0 to the instances main article in the form of a string.
.ie n .IP "$revisions\->generator" 4
.el .IP "\f(CW$revisions\fR\->generator" 4
.IX Item "$revisions->generator"
Returns a string containing 'MediaWiki' and a version number of the instance that dumped this file.
Example: 'MediaWiki 1.14alpha'
.ie n .IP "$revisions\->case" 4
.el .IP "\f(CW$revisions\fR\->case" 4
.IX Item "$revisions->case"
Returns a string describing the case sensitivity configured in the instance.
.ie n .IP "$revisions\->namespaces" 4
.el .IP "\f(CW$revisions\fR\->namespaces" 4
.IX Item "$revisions->namespaces"
Returns a reference to an array of references. Each reference is to another array with the first
item being the unique identifier of the namespace and the second element containing a string
that is the name of the namespace.
.ie n .IP "$revisions\->namespaces_names" 4
.el .IP "\f(CW$revisions\fR\->namespaces_names" 4
.IX Item "$revisions->namespaces_names"
Returns an array reference the array contains strings of all the namespaces each as an element.
.ie n .IP "$revisions\->current_byte" 4
.el .IP "\f(CW$revisions\fR\->current_byte" 4
.IX Item "$revisions->current_byte"
Returns the number of bytes that has been processed so far
.ie n .IP "$revisions\->size" 4
.el .IP "\f(CW$revisions\fR\->size" 4
.IX Item "$revisions->size"
Returns the total size of the dump file in bytes.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.SS "Extract the article text of each revision of an article using a given title"
.IX Subsection "Extract the article text of each revision of an article using a given title"
.Vb 1
\&  #!/usr/bin/perl
\&  
\&  use strict;
\&  use warnings;
\&  use MediaWiki::DumpFile::Compat;
\&  
\&  my $file = shift(@ARGV) or die "must specify a MediaWiki dump of the current pages";
\&  my $title = shift(@ARGV) or die "must specify an article title";
\&  my $pmwd = Parse::MediaWikiDump\->new;
\&  my $dump = $pmwd\->revisions($file);
\&  my $found = 0;
\&  
\&  binmode(STDOUT, \*(Aq:utf8\*(Aq);
\&  binmode(STDERR, \*(Aq:utf8\*(Aq);
\&  
\&  #this is the only currently known value but there could be more in the future
\&  if ($dump\->case ne \*(Aqfirst\-letter\*(Aq) {
\&    die "unable to handle any case setting besides \*(Aqfirst\-letter\*(Aq";
\&  }
\&  
\&  $title = case_fixer($title);
\&  
\&  while(my $revision = $dump\->next) {
\&    if ($revision\->title eq $title) {
\&      print STDERR "Located text for $title revision ", $revision\->revision_id, "\en";
\&      my $text = $revision\->text;
\&      print $$text;
\&      
\&      $found = 1;
\&    }
\&  }
\&  
\&  print STDERR "Unable to find article text for $title\en" unless $found;
\&  exit 1;
\&  
\&  #removes any case sensativity from the very first letter of the title
\&  #but not from the optional namespace name
\&  sub case_fixer {
\&    my $title = shift;
\&  
\&    #check for namespace
\&    if ($title =~ /^(.+?):(.+)/) {
\&      $title = $1 . \*(Aq:\*(Aq . ucfirst($2);
\&    } else {
\&      $title = ucfirst($title);
\&    }
\&  
\&    return $title;
\&  }
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.SS "Version 0.4"
.IX Subsection "Version 0.4"
This class was updated to support version 0.4 dump files from
a MediaWiki instance but it does not currently support any of
the new information available in those files.
