.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MemoryProfiling 3pm"
.TH MemoryProfiling 3pm "2015-05-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Ideas and Plans for Memory Profiling with NYTProf"
.IX Header "Ideas and Plans for Memory Profiling with NYTProf"
\&\s-1XXX \s0\fIThis mostly a dumping ground for thoughts, and links at the moment\fR.
Somewhere to gather the info so it'll be easier to find when someone
wants to work on it.
.PP
It's also focussed on runtime profiling of total memory usage over time
(rather than a detailed analysis of who 'owns' what memory as some particular
point in time, like the end of the program).
.PP
NYTProf currently only measures time and supports a limited range of \*(L"clocks\*(R"
(realtime vs cputime). For profiling memory we need to add a new kind of
\&\*(L"clock\*(R" that measures memory usage. Since we're generalizing the concept of
what gets measured (and how we get the info from the system) a better name
than \*(L"clock\*(R" would be \*(L"probe\*(R".
.PP
Conjectural terminology:
.PP
.Vb 2
\&    "Probe" means some measuring mechanism like get_clock(), times(), getrusage(),
\&    that may yield multiple pieces of information with a single call.
\&
\&    "Measure" is one specific item generated by a probe.
\&
\&    Probe "time"   uses times(), measures: "time.user", "time.user+sys" etc
\&    Probe "clock"  uses clock_gettime(), measures: "clock.realtime", "clock.monotonic" etc
\&    Probe "rusage" uses getrusage(), measures: "rusage.majflt", "rusage.nvcsw" etc
\&    Probe "memory" measures: "memory.bytes", "mem.allocs" etc
\&    Probe "arena"  measures: "arena.svs", "arena.bytes" etc
.Ve
.PP
Generalize the concepts of probes. Have a structure defining a 'probe' with
pointers to functions to get the values, subtract values to get relative ticks,
return the tick units etc. Give them names and attributes (cpu, realtime etc).
User could then pick a probe by name. By default we'd pick the best available
realtime probe.
Use the subtraction logic where we currently handle times in the statement and
subroutine profilers.
.SH "Email threads"
.IX Header "Email threads"
"Memory profiling in Devel::NYTProf?: \- June 2009
http://groups.google.com/group/develnytprof\-dev/browse_frm/thread/1df4cba3001cd4e4/136812b44e9f7631
Talking about the problems of measuring memory usage of the whole process re:
http://blog.robin.smidsrod.no/index.php/2009/05/26/memory\-footprint\-of\-popular\-cpan\-modules
.PP
\&\*(L"Memory profiling possibilities in NYTProf\*(R" \- September 2009
http://groups.google.com/group/develnytprof\-dev/browse_frm/thread/c711c132216a3cea/035012e3dc2971ec
This includes a detailed overview of the issues.
.PP
\&\*(L"profiling memory\*(R" \- Dec 2009
http://groups.google.com/group/develnytprof\-dev/browse_frm/thread/5ffd24200866b0c1/201b58c18d826aaa
Nicholas Clark offers an experimental patch that intercepts malloc and free
and makes NYTProf measure memory usage.
.SH "Possibly Relevant Perl Modules"
.IX Header "Possibly Relevant Perl Modules"
Per-process memory information:
.PP
.Vb 1
\&    http://metacpan.org/pod/Devel::Mallinfo
.Ve
.PP
Arena, stash, and pad based memory reporters:
.PP
.Vb 5
\&    http://metacpan.org/pod/Devel::Gladiator
\&    http://metacpan.org/release/Internals\-DumpArenas/
\&    http://metacpan.org/release/Internals\-GraphArenas/
\&    http://metacpan.org/pod/Devel::DumpSizes
\&    http://metacpan.org/pod/Devel::Arena
.Ve
.PP
Per-object memory size reporters:
.PP
.Vb 2
\&    http://metacpan.org/pod/Devel::Size
\&    http://metacpan.org/pod/Devel::Size::Report
.Ve
.PP
Others:
.PP
.Vb 2
\&    http://metacpan.org/release/Devel\-Memalyzer/
\&    http://metacpan.org/pod/Devel::Memalyzer::Plugin::ProcSmaps
.Ve
.SH "Other Items of Interest"
.IX Header "Other Items of Interest"
\&\*(L"Memory Efficient Perl\*(R" slides by jjore
.PP
.Vb 2
\&    http://docs.google.com/present/view?id=dg7kgpct_24cjs3c9fv
\&    http://diotalevi.isa\-geek.net/~josh/090402/frontend.png
.Ve
.PP
Other profile/memory visualization tools
.PP
.Vb 2
\&    http://netjam.org/spoon/viz/
\&    http://java.dzone.com/announcements/visualvm\-12\-great\-java
.Ve
.PP
http://blogs.perl.org/users/alex_balhatchet/2012/01/debugging\-memory\-use\-in\-perl\-\-\-help.html
.PP
http://stackoverflow.com/questions/8715611/can\-i\-use\-dtrace\-on\-os\-x\-10\-5\-to\-determine\-which\-of\-my\-perl\-subs\-is\-causing\-the
